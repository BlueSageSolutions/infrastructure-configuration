---
- name: Reconcile User Groups
  hosts: localhost
  gather_facts: no
  vars:
    authentication_domain_id: 0f4dda55-888e-4f4d-abba-ac7b3417faba
    client_management_group_name: ClientAccountManagement
    client_readonly_group_name: ClientAccountReadonly

  tasks:
    - name: Get New Relic Service Account Key
      delegate_to: localhost
      run_once: true
      shell: |
        API_KEY=$(aws ssm get-parameter --name /secrets/new_relic/api_key --with-decryption --query "Parameter.Value" --output text)

        if [ -z "$API_KEY" ]; then
          echo Unable to read api key, are you logged in and able to read from bss account?
          exit 1
        fi

        echo $API_KEY
      register: api_key

    - name: Set Api Key as Fact
      run_once: true
      set_fact:
        api_key: "{{ api_key.stdout }}"

    - name: Query New Relic Groups
      delegate_to: localhost
      run_once: true
      shell: |
        QUERY_GROUP_RESPONSE=$(curl https://api.newrelic.com/graphql \
          -H 'Content-Type: application/json' \
          -H 'API-Key: {{api_key}}' \
          --data-binary '{
                          "query": "{actor {organization {userManagement {authenticationDomains(id: \"{{ authentication_domain_id }}\") {authenticationDomains {groups {groups {displayName id users {users {name id}}}}}}}}}}",
                          "variables": ""
                        }'
        )
        echo $QUERY_GROUP_RESPONSE
      register: query_new_relic_groups

    - name: Set Query Group as Fact
      delegate_to: localhost
      run_once: true
      set_fact:
        query_group: "{{ query_new_relic_groups.stdout | from_json }}"

    - name: Query New Relic Users
      delegate_to: localhost
      run_once: true
      shell: |
        QUERY_USER_RESPONSE=$(curl https://api.newrelic.com/graphql \
          -H 'Content-Type: application/json' \
          -H 'API-Key: {{api_key}}' \
          --data-binary '{
                            "query": "{actor {organization {userManagement {authenticationDomains(id: \"{{ authentication_domain_id }}\") {authenticationDomains {users {users {id email type {displayName} name}}}}}}}}",
                            "variables": ""
                        }'
        )
        echo $QUERY_USER_RESPONSE
      register: query_new_relic_users

    - name: Set Query Users as Fact
      delegate_to: localhost
      run_once: true
      set_fact:
        query_users: "{{ query_new_relic_users.stdout | from_json }}"

    - debug:
        var: query_users

    - name: Create client_management_group_name Group if does not exist
      delegate_to: localhost
      run_once: true
      shell: |
        CLIENT_MANAGEMENT_GROUP=$(echo '{{ query_group | to_json }}' | jq '.data.actor.organization.userManagement.authenticationDomains.authenticationDomains.[0].groups.groups.[] | select(.displayName == "{{ client_management_group_name }}")')

        if [ -z "$CLIENT_MANAGEMENT_GROUP" ]; then
          # create group if does not exist
          CREATE_GROUP_RESPONSE=$(curl https://api.newrelic.com/graphql \
            -H 'Content-Type: application/json' \
            -H 'API-Key: {{api_key}}' \
            --data-binary '{
                            "query": "mutation {userManagementCreateGroup(createGroupOptions: {authenticationDomainId: \"{{ authentication_domain_id }}\" displayName: \"{{ client_management_group_name }}\" }) {group {displayName id}}}",
                            "variables": ""
                          }'
          )
          GROUP_ID=$(echo $CREATE_GROUP_RESPONSE | jq -r .data.userManagementCreateGroup.group.id)
          echo $GROUP_ID
        else
          GROUP_ID=$(echo $CLIENT_MANAGEMENT_GROUP | jq -r .id)
          echo $GROUP_ID
        fi
      register: client_management_group_id

    - name: Set Client Management Group Id as Fact
      set_fact:
        client_management_group_id: "{{ client_management_group_id.stdout }}"

    - name: Create client_readonly_group_name Group if does not exist
      delegate_to: localhost
      run_once: true
      shell: |
        CLIENT_READONLY_GROUP=$(echo '{{ query_group | to_json }}' | jq '.data.actor.organization.userManagement.authenticationDomains.authenticationDomains.[0].groups.groups.[] | select(.displayName == "{{ client_readonly_group_name }}")')

        if [ -z "$CLIENT_READONLY_GROUP" ]; then
          # create group if does not exist
          CREATE_GROUP_RESPONSE=$(curl https://api.newrelic.com/graphql \
            -H 'Content-Type: application/json' \
            -H 'API-Key: {{api_key}}' \
            --data-binary '{
                            "query": "mutation {userManagementCreateGroup(createGroupOptions: {authenticationDomainId: \"{{ authentication_domain_id }}\" displayName: \"{{ client_readonly_group_name }}\" }) {group {displayName id}}}",
                            "variables": ""
                          }'
          )
          GROUP_ID=$(echo $CREATE_GROUP_RESPONSE | jq -r .data.userManagementCreateGroup.group.id)
          echo $GROUP_ID
        else
          GROUP_ID=$(echo $CLIENT_READONLY_GROUP | jq -r .id)
          echo $GROUP_ID
        fi
      register: client_readonly_group_id

    - name: Set Client ReadOnly Group Id as Fact
      set_fact:
        client_readonly_group_id: "{{ client_readonly_group_id.stdout }}"

