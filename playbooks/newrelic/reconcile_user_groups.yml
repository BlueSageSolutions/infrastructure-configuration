---
- name: Reconcile User Groups
  hosts: localhost
  gather_facts: no
  vars:
    authentication_domain_id: 0f4dda55-888e-4f4d-abba-ac7b3417faba
    client_management_group_name: ClientAccountManagement
    client_readonly_group_name: ClientAccountReadonly

  tasks:
    - name: Get New Relic Service Account Key
      delegate_to: localhost
      run_once: true
      shell: |
        API_KEY=$(aws ssm get-parameter --name /secrets/new_relic/api_key --with-decryption --query "Parameter.Value" --output text)

        if [ -z "$API_KEY" ]; then
          echo Unable to read api key, are you logged in and able to read from bss account?
          exit 1
        fi

        echo $API_KEY
      register: api_key

    - name: Set Api Key as Fact
      run_once: true
      set_fact:
        api_key: "{{ api_key.stdout }}"

    - name: Query New Relic Groups
      delegate_to: localhost
      run_once: true
      shell: |
        QUERY_GROUP_RESPONSE=$(curl https://api.newrelic.com/graphql \
          -H 'Content-Type: application/json' \
          -H 'API-Key: {{api_key}}' \
          --data-binary '{
                          "query": "{actor {organization {userManagement {authenticationDomains(id: \"{{ authentication_domain_id }}\") {authenticationDomains {groups {groups {displayName id users {users {name id}}}}}}}}}}",
                          "variables": ""
                        }'
        )
        echo $QUERY_GROUP_RESPONSE
      register: query_new_relic_groups

    - name: Set Query Group as Fact
      delegate_to: localhost
      run_once: true
      set_fact:
        query_group: "{{ query_new_relic_groups.stdout | from_json }}"

    - name: Query New Relic Users
      delegate_to: localhost
      run_once: true
      shell: |
        QUERY_USER_RESPONSE=$(curl https://api.newrelic.com/graphql \
          -H 'Content-Type: application/json' \
          -H 'API-Key: {{api_key}}' \
          --data-binary '{
                            "query": "{actor {organization {userManagement {authenticationDomains(id: \"{{ authentication_domain_id }}\") {authenticationDomains {users {users {id email type {displayName} name}}}}}}}}",
                            "variables": ""
                        }'
        )
        echo $QUERY_USER_RESPONSE
      register: query_new_relic_users

    - name: Set Query Users as Fact
      delegate_to: localhost
      run_once: true
      set_fact:
        query_users: "{{ query_new_relic_users.stdout | from_json }}"

    - name: Get client_management_group_name group id
      delegate_to: localhost
      run_once: true
      shell: |
        CLIENT_MANAGEMENT_GROUP=$(echo '{{ query_group | to_json }}' | jq -r '.data.actor.organization.userManagement.authenticationDomains.authenticationDomains.[0].groups.groups.[] | select(.displayName == "{{ client_management_group_name }}") | .id')
        echo $CLIENT_MANAGEMENT_GROUP
      register: client_management_group_id

    - name: set client_management_group_id fact
      set_fact:
        client_management_group_id: "{{ client_management_group_id.stdout }}"

    - name: Get client_readonly_group_name group id
      delegate_to: localhost
      run_once: true
      shell: |
        CLIENT_READONLY_GROUP=$(echo '{{ query_group | to_json }}' | jq -r '.data.actor.organization.userManagement.authenticationDomains.authenticationDomains.[0].groups.groups.[] | select(.displayName == "{{ client_readonly_group_name }}") | .id')
        echo $CLIENT_READONLY_GROUP
      register: client_readonly_group_id

    - name: set client_readonly_group_id fact
      set_fact:
        client_readonly_group_id: "{{ client_readonly_group_id.stdout }}"
    
    - name: Delete client_management_group_name
      delegate_to: localhost
      run_once: true
      shell: |
        DELETE_CLIENT_MANAGEMENT_GROUP_RESPONSE=$(curl https://api.newrelic.com/graphql \
          -H 'Content-Type: application/json' \
          -H 'API-Key: {{ api_key }}' \
          --data-binary '{
                          "query": "mutation {userManagementDeleteGroup(groupOptions: {id: \"{{ client_management_group_id }}\" }) {group {id}}}",
                          "variables": ""
                        }'
        )

    - name: Delete client_readonly_group_name
      delegate_to: localhost
      run_once: true
      shell: |
        DELETE_CLIENT_READONLY_GROUP_RESPONSE=$(curl https://api.newrelic.com/graphql \
          -H 'Content-Type: application/json' \
          -H 'API-Key: {{ api_key }}' \
          --data-binary '{
                          "query": "mutation {userManagementDeleteGroup(groupOptions: {id: \"{{ client_readonly_group_id }}\" }) {group {id}}}",
                          "variables": ""
                        }'
        )

    - name: Create client_management_group_name Group
      delegate_to: localhost
      run_once: true
      shell: |
        CREATE_GROUP_RESPONSE=$(curl https://api.newrelic.com/graphql \
            -H 'Content-Type: application/json' \
            -H 'API-Key: {{api_key}}' \
            --data-binary '{
                            "query": "mutation {userManagementCreateGroup(createGroupOptions: {authenticationDomainId: \"{{ authentication_domain_id }}\" displayName: \"{{ client_management_group_name }}\" }) {group {displayName id}}}",
                            "variables": ""
                          }'
          )
          GROUP_ID=$(echo $CREATE_GROUP_RESPONSE | jq -r .data.userManagementCreateGroup.group.id)
          echo $GROUP_ID
      register: client_management_group_id

    - name: Set Client Management Group Id as Fact
      set_fact:
        client_management_group_id: "{{ client_management_group_id.stdout }}"

    - name: Create client_readonly_group_name Group if does not exist
      delegate_to: localhost
      run_once: true
      shell: |
          CREATE_GROUP_RESPONSE=$(curl https://api.newrelic.com/graphql \
            -H 'Content-Type: application/json' \
            -H 'API-Key: {{api_key}}' \
            --data-binary '{
                            "query": "mutation {userManagementCreateGroup(createGroupOptions: {authenticationDomainId: \"{{ authentication_domain_id }}\" displayName: \"{{ client_readonly_group_name }}\" }) {group {displayName id}}}",
                            "variables": ""
                          }'
          )
          GROUP_ID=$(echo $CREATE_GROUP_RESPONSE | jq -r .data.userManagementCreateGroup.group.id)
          echo $GROUP_ID
      register: client_readonly_group_id

    - name: Set Client ReadOnly Group Id as Fact
      set_fact:
        client_readonly_group_id: "{{ client_readonly_group_id.stdout }}"

    - name: Get FullPlatform BSS User Ids
      delegate_to: localhost
      run_once: true
      shell: |
        BSS_FULLPLATFORM_USERS=$(echo '{{ query_users | to_json }}' | jq '.data.actor.organization.userManagement.authenticationDomains.authenticationDomains.[0].users.users.[] | select(.email | contains("@bluesageusa.com")) | select(.type.displayName == "Full platform")')
        BSS_FULLPLATFORM_USERS_IDS=$(echo $BSS_FULLPLATFORM_USERS | jq -s '[.[].id]')

        echo $BSS_FULLPLATFORM_USERS_IDS
      register: bss_full_platform_user_ids

    - name: Set Bss Full Platform User Ids as Fact 
      set_fact:
        bss_full_platform_user_ids: "{{ bss_full_platform_user_ids.stdout }}"

    - name: Get Non-FullPlatform BSS User Ids
      delegate_to: localhost
      run_once: true
      shell: |
        BSS_NONFULLPLATFORM_USERS=$(echo '{{ query_users | to_json }}' | jq '.data.actor.organization.userManagement.authenticationDomains.authenticationDomains.[0].users.users.[] | select(.email | contains("@bluesageusa.com")) | select(.type.displayName != "Full platform")')
        BSS_NONFULLPLATFORM_USERS_IDS=$(echo $BSS_NONFULLPLATFORM_USERS | jq -s '[.[].id]')

        echo $BSS_NONFULLPLATFORM_USERS_IDS
      register: bss_nonfull_platform_user_ids

    - name: Set Bss Non Full Platform User Ids as Fact 
      set_fact:
        bss_nonfull_platform_user_ids: "{{ bss_nonfull_platform_user_ids.stdout }}"

    - name: Add Full Platform Bluesage Users to client_management_group_name
      delegate_to: localhost
      run_once: true
      shell: |
        ADD_BSS_FULLPLATFORM_USERS=$(curl https://api.newrelic.com/graphql \
          -H 'Content-Type: application/json' \
          -H 'API-Key: {{api_key}}' \
          --data-binary '{
                        "query": "mutation {userManagementAddUsersToGroups(addUsersToGroupsOptions: {groupIds: [\"{{client_management_group_id}}\"] userIds: {{ bss_full_platform_user_ids }} }) {groups {displayName id}}}",
                        "variables": ""
                      }'
        )
        echo $ADD_BSS_FULLPLATFORM_USERS

    - name: Add Non Full Platform Bluesage Users to client_read_only_group_name
      delegate_to: localhost
      run_once: true
      shell: |
        ADD_BSS_FULLPLATFORM_USERS=$(curl https://api.newrelic.com/graphql \
          -H 'Content-Type: application/json' \
          -H 'API-Key: {{api_key}}' \
          --data-binary '{
                        "query": "mutation {userManagementAddUsersToGroups(addUsersToGroupsOptions: {groupIds: [\"{{client_readonly_group_id}}\"] userIds: {{ bss_nonfull_platform_user_ids }} }) {groups {displayName id}}}",
                        "variables": ""
                      }'
        )
        echo $ADD_BSS_FULLPLATFORM_USERS
